
#include <CGAL/Exact_predicates_exact_constructions_kernel.h>
#include <CGAL/Arr_naive_point_location.h>
#include <CGAL/Arr_non_caching_segment_basic_traits_2.h>
#include <CGAL/Segment_2.h>
#include <CGAL/Arr_segment_traits_2.h>
#include <CGAL/Arrangement_2.h>
#include <CGAL/Delaunay_triangulation_2.h>
#include <CGAL/Constrained_Delaunay_triangulation_2.h>


typedef CGAL::Exact_predicates_exact_constructions_kernel                       K1;
typedef CGAL::Arr_segment_traits_2<K1>                                          Traits_2;
typedef CGAL::Arrangement_2<Traits_2>                                           Arrangement_2;
typedef CGAL::Delaunay_triangulation_2<K1>                                      Delaunay2;
typedef CGAL::Constrained_Delaunay_triangulation_2<K1, CGAL::Default, Itag>     CDT2;
typedef Traits_2::Point_2                                                       Point_2;
typedef Traits_2::X_monotone_curve_2                                            Segment_2;
typedef CGAL::Arr_naive_point_location<Arrangement_2>                           WalkPL_2;

int main()
{
    ExternalDataSet datas("data1.txt","data2.txt");
    
    Arrangement_2 arr;
    WalkPL_2 walkPL(arr);

    // first step of insertions
    std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();

    std::vector<Segment_2> segmentSet1 = datas.externalData(0);
    CGAL::insert_non_intersecting_curves(arr, segmentSet1.begin(), segmentSet1.end());
    segmentSet1.clear();

    std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
    if (verbose) std::cout << "Time spent - First Insertion: " << std::setprecision(6) << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count()/1.0e+6 << std::fixed << " sec." << std::endl;  
    
    //Second step of insertions 
    begin = std::chrono::steady_clock::now();

    std::vector<Segment_2> segmentSet2 = datas.externalData(1);
    // #pragma omp parallel for if(_parallelOptimization)
    for(auto seg = segmentSet2.begin(); seg < segmentSet2.end(); ++seg)
    {
        CGAL::insert(arr, *seg, walkPL);
    }
    segmentSet2.clear();

    end = std::chrono::steady_clock::now();
    if (verbose) std::cout << "Time spent - Second Insertion: " << std::setprecision(6) << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count()/1.0e+6 << std::fixed << " sec." << std::endl;  
    
    CDT2 cdt;
    // Constrained Delaunay package to triangulate the arrangement
    begin = std::chrono::steady_clock::now();
    for (auto it = arr.edges_begin(); it != arr.edges_end(); ++it) {
        cdt.insert(it->source()->point(), it->target()->point());
    }
    end = std::chrono::steady_clock::now();
    if (verbose) std::cout << "Time spent - Creation of the Constrained Delaunay Triangulation: " << std::setprecision(6) << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count()/1.0e+6 << std::fixed << " sec." << std::endl;  
}